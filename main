import requests
import os
from PIL import Image
from io import BytesIO
from colorthief import ColorThief
import math
import concurrent.futures

# Last.fm credentials
API_KEY = '76066044289aab20a0ce66e6c3805f93'
USER = 'nerfbaboom'
LIMIT = 150  # Number of albums to fetch
texture_folder = "/home/david/.minecraft/resourcepacks/vanilladefault/assets/minecraft/textures/block"
album_folder = "albums"

# Fetch top albums
def get_top_albums():
    url = f"http://ws.audioscrobbler.com/2.0/?method=user.gettopalbums&user={USER}&api_key={API_KEY}&format=json&limit={LIMIT}"
    response = requests.get(url)
    data = response.json()
    
    album_urls = [album['image'][-1]['#text'] for album in data['topalbums']['album']]
    
    return album_urls

# Download album covers
def download_images(album_urls, folder='albums'):
    if not os.path.exists(folder):
        os.makedirs(folder)
    
    def download_image(url, index):
        try:
            response = requests.get(url)
            img = Image.open(BytesIO(response.content))
            img.save(os.path.join(folder, f'album_{index}.png'))
            print(f"Downloaded album_{index}.png")
        except Exception as e:
            print(f"Error downloading image {url}: {e}")

    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
        for i, url in enumerate(album_urls):
            executor.submit(download_image, url, i)

# Get dominant color
def get_dominant_color(image_path):
    try:
        color_thief = ColorThief(image_path)
        return color_thief.get_color(quality=1)
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return (0, 0, 0)  # Return a default color in case of an error

# Calculate color distance
def color_distance(c1, c2):
    return math.sqrt(sum((e1 - e2) ** 2 for e1, e2 in zip(c1, c2)))

def replace_textures_with_closest_album(album_folder, texture_folder):
    target_size = (512, 512)  # Ensure textures are at least 64x64
    album_colors = {}

    # Precompute dominant colors for all album covers
    for album_file in os.listdir(album_folder):
        if album_file.endswith(('.png', '.jpg', '.jpeg')):
            album_path = os.path.join(album_folder, album_file)
            album_colors[album_file] = get_dominant_color(album_path)
    
    def process_texture(texture_file):
        texture_path = os.path.join(texture_folder, texture_file)
        
        # Ignore non-image files
        if not texture_file.endswith(('.png', '.jpg', '.jpeg')):
            print(f"Skipping non-image file: {texture_file}")
            return

        try:
            dominant_texture_color = get_dominant_color(texture_path)
        except Exception as e:
            print(f"Error processing {texture_file}: {e}")
            return
        
        closest_album = None
        min_distance = float('inf')
        
        # Compare each album's dominant color with the texture
        for album_file, dominant_album_color in album_colors.items():
            distance = color_distance(dominant_texture_color, dominant_album_color)
            
            if distance < min_distance:
                min_distance = distance
                closest_album = album_file
        
        # Replace the texture with the closest album
        if closest_album:
            try:
                album_image = Image.open(os.path.join(album_folder, closest_album))
                resized_album = album_image.resize(target_size)
                resized_album.save(texture_path)
                print(f"Replaced {texture_file} with {closest_album}")
            except Exception as e:
                print(f"Error saving {texture_file}: {e}")

    # Process textures in parallel
    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
        for texture_file in os.listdir(texture_folder):
            executor.submit(process_texture, texture_file)

if __name__ == "__main__":
    albums = get_top_albums()
    download_images(albums, album_folder)
    replace_textures_with_closest_album(album_folder, texture_folder)
